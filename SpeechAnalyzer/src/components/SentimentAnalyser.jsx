import React, { useState } from 'react';
import Sentiment from 'sentiment';
import jsPDF from 'jspdf';
import { Link } from 'react-router-dom'; // Import Link for back navigation
import './SentimentAnalyser.css';

const SentimentAnalyser = ({ userEmail }) => {
    const [text, setText] = useState('');
    const [sentiment, setSentiment] = useState(null);

    const handleTextChange = (e) => {
        setText(e.target.value);
    };

    const analyzeSentiment = () => {
        const sentimentAnalyzer = new Sentiment();
        const result = sentimentAnalyzer.analyze(text);
        setSentiment(result);
    };

    const exportToPDF = () => {
        if (!sentiment) {
            alert("No sentiment analysis result to export.");
            return;
        }

        const doc = new jsPDF();

        const margin = 10;
        const pageWidth = doc.internal.pageSize.width;
        const maxWidth = pageWidth - 2 * margin;

        // Title
        doc.setFontSize(20);
        doc.setFont("helvetica", "bold");
        doc.text("Sentiment Analysis Report", margin, 20);

        // User Email
        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");
        doc.text(`User Email: ${userEmail || 'Not Provided'}`, margin, 30);

        // Add a line separator
        doc.setLineWidth(0.5);
        doc.line(margin, 33, pageWidth - margin, 33);

        // Text Analyzed
        doc.setFontSize(16);
        doc.setFont("helvetica", "bold");
        doc.text("Text Analyzed:", margin, 40);
        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");

        // Split long text into multiple lines to fit within the page width
        const textLines = doc.splitTextToSize(text, maxWidth);
        let y = 50;
        textLines.forEach(line => {
            doc.text(line, margin, y);
            y += 10;
        });

        // Sentiment Details
        doc.setFontSize(16);
        doc.setFont("helvetica", "bold");
        doc.text("Sentiment Analysis Details:", margin, y);
        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");

        y += 10;
        doc.text(`Score: ${sentiment.score}`, margin, y);
        y += 10;
        doc.text(`Comparative: ${sentiment.comparative}`, margin, y);
        y += 10;
        doc.text(`Positive Words: ${sentiment.positive.join(', ')}`, margin, y);
        y += 10;
        doc.text(`Negative Words: ${sentiment.negative.join(', ')}`, margin, y);

        // Footer
        doc.setFontSize(10);
        doc.setFont("helvetica", "italic");
        doc.text("Generated by Sentiment Analyzer Application", margin, doc.internal.pageSize.height - 10);

        // Save the PDF
        doc.save('sentiment-report.pdf');
    };

    return (
        <div className="sentiment-analyzer-page">
            <Link to="/services" className="back-button">Back to Services</Link>
            <h2>Sentiment Analyzer</h2>
            <div className="textarea-container">
                <textarea
                    value={text}
                    onChange={handleTextChange}
                    placeholder="Enter text here..."
                    rows="10"
                />
                <button onClick={analyzeSentiment}>Analyze Sentiment</button>
                <button onClick={exportToPDF} className="export-button">Export to PDF</button>
            </div>
            {sentiment && (
                <div className="results">
                    <h3>Sentiment Analysis Result</h3>
                    <p><strong>Score:</strong> {sentiment.score}</p>
                    <p><strong>Comparative:</strong> {sentiment.comparative}</p>
                    <p><strong>Positive Words:</strong> {sentiment.positive.join(', ')}</p>
                    <p><strong>Negative Words:</strong> {sentiment.negative.join(', ')}</p>
                </div>
            )}
        </div>
    );
};

export default SentimentAnalyser;
